{"mappings":"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","sources":["netlify/demo/canvas.js"],"sourcesContent":["/* eslint no-var: 0, camelcase: 0 */\n\nvar eventLeftMargin = 180;\nvar eventRightMargin = 0;\n\nfunction canvasLoadEventUpdate(canvas, minTime, maxTime, events) {\n  var event;\n  var start;\n  var ctx = canvas.getContext('2d');\n  for (var i = 0, y_offset = 20; i < events.length; i++) {\n    event = events[i];\n    start = event.time;\n    // var end = event.time + event.duration + event.latency;\n    if (start >= minTime && start <= maxTime) {\n      y_offset += 20;\n    }\n  }\n  canvas.height = y_offset;\n\n  ctx.fillStyle = 'green';\n  ctx.globalAlpha = 0.5;\n  ctx.fillRect(0, 0, eventLeftMargin, canvas.height);\n  ctx.fillRect(\n    canvas.width - eventRightMargin,\n    0,\n    eventRightMargin,\n    canvas.height\n  );\n  ctx.globalAlpha = 1;\n\n  // draw legend\n  var x_offset = 5;\n  ctx.font = '12px Arial';\n\n  var legend = 'load event';\n  ctx.fillStyle = 'black';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset = eventLeftMargin + 5;\n\n  legend = 'start - end';\n  ctx.fillStyle = 'black';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset += ctx.measureText(legend).width + 5;\n\n  legend = '[latency';\n  ctx.fillStyle = 'orange';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset += ctx.measureText(legend).width + 5;\n\n  legend = 'loading';\n  ctx.fillStyle = 'green';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset += ctx.measureText(legend).width + 5;\n\n  legend = 'parsing';\n  ctx.fillStyle = 'blue';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset += ctx.measureText(legend).width + 5;\n\n  legend = 'appending]';\n  ctx.fillStyle = 'red';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset += ctx.measureText(legend).width + 5;\n\n  legend = 'size bitrate';\n  ctx.fillStyle = 'black';\n  ctx.fillText(legend, x_offset, 15);\n  x_offset += ctx.measureText(legend).width + 5;\n\n  for (i = 0, y_offset = 20; i < events.length; i++) {\n    event = events[i];\n    start = Math.round(event.time);\n    // var end = Math.round(event.time + event.duration + event.latency);\n    if (start >= minTime && start <= maxTime) {\n      canvasDrawLoadEvent(ctx, y_offset, event, minTime, maxTime);\n      y_offset += 20;\n    }\n  }\n}\n\nfunction canvasVideoEventUpdate(canvas, minTime, maxTime, events) {\n  var event;\n  var start;\n  var ctx = canvas.getContext('2d');\n  for (var i = 0, y_offset = 20; i < events.length; i++) {\n    event = events[i];\n    start = event.time;\n    // end = event.time;\n    if (start >= minTime && start <= maxTime) {\n      y_offset += 20;\n    }\n  }\n  canvas.height = y_offset;\n  ctx.fillStyle = 'green';\n  ctx.globalAlpha = 0.5;\n  ctx.fillRect(0, 0, eventLeftMargin, canvas.height);\n  ctx.fillRect(\n    canvas.width - eventRightMargin,\n    0,\n    eventRightMargin,\n    canvas.height\n  );\n  ctx.globalAlpha = 1;\n\n  // draw legend\n  var x_offset = 5;\n  ctx.font = '12px Arial';\n\n  var legend = 'video event';\n  ctx.fillStyle = 'black';\n  ctx.fillText(legend, x_offset, 15);\n\n  x_offset = eventLeftMargin + 5;\n  legend = 'time';\n  ctx.fillStyle = 'black';\n  ctx.fillText(legend, x_offset, 15);\n\n  x_offset += ctx.measureText(legend).width + 5;\n  legend = '[duration]';\n  ctx.fillStyle = 'blue';\n  ctx.fillText(legend, x_offset, 15);\n\n  for (i = 0, y_offset = 20; i < events.length; i++) {\n    event = events[i];\n    start = Math.round(event.time);\n    // end = Math.round(event.time);\n    if (start >= minTime && start <= maxTime) {\n      canvasDrawVideoEvent(ctx, y_offset, event, minTime, maxTime);\n      y_offset += 20;\n    }\n  }\n}\n\nfunction canvasBufferWindowUpdate(canvas, minTime, maxTime, focusTime, events) {\n  var ctx = canvas.getContext('2d');\n  var minTimeBuffer;\n  var minTimePos;\n  var focusTimeBuffer;\n  var focusTimePos;\n  var bufferChartStart = eventLeftMargin;\n  var bufferChartWidth = ctx.canvas.width - eventLeftMargin - eventRightMargin;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  if (events.length === 0) {\n    return;\n  }\n\n  ctx.fillStyle = 'green';\n  ctx.globalAlpha = 0.5;\n  ctx.fillRect(0, 0, eventLeftMargin, canvas.height);\n  ctx.globalAlpha = 1;\n\n  // draw legend\n  var x_offset = 5;\n  var y_offset = 0;\n  ctx.font = '15px Arial';\n\n  var maxBuffer = 0;\n  var firstEventIdx = -1;\n  var focusEventIdx = -1;\n  var event;\n  for (var i = 0; i < events.length; i++) {\n    event = events[i];\n    maxBuffer = Math.max(maxBuffer, event.buffer + event.pos);\n    if (firstEventIdx === -1 && event.time >= minTime) {\n      firstEventIdx = Math.max(0, i - 1);\n    }\n    if (focusEventIdx === -1 && event.time >= focusTime) {\n      focusEventIdx = Math.max(0, i - 1);\n    }\n  }\n  // compute position and buffer length at pos minTime using linear approximation\n  if (firstEventIdx + 1 < events.length) {\n    minTimePos =\n      events[firstEventIdx].pos +\n      ((minTime - events[firstEventIdx].time) *\n        (events[firstEventIdx + 1].pos - events[firstEventIdx].pos)) /\n        (events[firstEventIdx + 1].time - events[firstEventIdx].time);\n    minTimeBuffer =\n      minTimePos +\n      events[firstEventIdx].buffer +\n      ((minTime - events[firstEventIdx].time) *\n        (events[firstEventIdx + 1].buffer - events[firstEventIdx].buffer)) /\n        (events[firstEventIdx + 1].time - events[firstEventIdx].time);\n  } else {\n    minTimeBuffer = 0;\n    minTimePos = 0;\n  }\n\n  // compute position and buffer length at pos focusTime using linear approximation\n  if (focusEventIdx + 1 < events.length) {\n    focusTimePos =\n      events[focusEventIdx].pos +\n      ((focusTime - events[focusEventIdx].time) *\n        (events[focusEventIdx + 1].pos - events[focusEventIdx].pos)) /\n        (events[focusEventIdx + 1].time - events[focusEventIdx].time);\n    focusTimeBuffer =\n      events[focusEventIdx].buffer +\n      ((focusTime - events[focusEventIdx].time) *\n        (events[focusEventIdx + 1].buffer - events[focusEventIdx].buffer)) /\n        (events[focusEventIdx + 1].time - events[focusEventIdx].time);\n  } else {\n    focusTimePos = 0;\n    focusTimeBuffer = 0;\n  }\n\n  maxBuffer *= 1.1;\n\n  y_offset += 15;\n  var legend = 'play pos/buffer zoomed';\n  ctx.fillStyle = 'black';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = '[' + minTime + ',' + maxTime + ']';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'focus time:' + focusTime + ' ms';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'focus position:' + Math.round(focusTimePos) + ' ms';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'focus buffer:' + Math.round(focusTimeBuffer) + ' ms';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  ctx.fillStyle = 'blue';\n  ctx.beginPath();\n  ctx.moveTo(bufferChartStart, ctx.canvas.height);\n  ctx.lineTo(\n    bufferChartStart,\n    ctx.canvas.height * (1 - minTimeBuffer / maxBuffer)\n  );\n  for (var j = firstEventIdx + 1; j < events.length; j++) {\n    event = events[j];\n    x_offset =\n      bufferChartStart +\n      (bufferChartWidth * (event.time - minTime)) / (maxTime - minTime);\n    y_offset = ctx.canvas.height * (1 - (event.buffer + event.pos) / maxBuffer);\n    ctx.lineTo(x_offset, y_offset);\n  }\n  ctx.lineTo(x_offset, canvas.height);\n  ctx.fill();\n\n  ctx.fillStyle = 'brown';\n  ctx.beginPath();\n  ctx.moveTo(bufferChartStart, ctx.canvas.height);\n  ctx.lineTo(\n    bufferChartStart,\n    ctx.canvas.height * (1 - minTimePos / maxBuffer)\n  );\n  for (var k = firstEventIdx + 1; k < events.length; k++) {\n    event = events[k];\n    x_offset =\n      bufferChartStart +\n      (bufferChartWidth * (event.time - minTime)) / (maxTime - minTime);\n    y_offset = ctx.canvas.height * (1 - event.pos / maxBuffer);\n    ctx.lineTo(x_offset, y_offset);\n  }\n  ctx.lineTo(x_offset, canvas.height);\n  ctx.fill();\n\n  ctx.fillStyle = 'white';\n  ctx.fillRect(\n    canvas.width - eventRightMargin,\n    0,\n    eventRightMargin,\n    canvas.height\n  );\n  ctx.fillStyle = 'green';\n  ctx.globalAlpha = 0.5;\n  ctx.fillRect(\n    canvas.width - eventRightMargin,\n    0,\n    eventRightMargin,\n    canvas.height\n  );\n  ctx.globalAlpha = 1;\n\n  ctx.fillStyle = 'black';\n  x_offset =\n    bufferChartStart +\n    (bufferChartWidth * (focusTime - minTime)) / (maxTime - minTime);\n  ctx.moveTo(x_offset, ctx.canvas.height);\n  y_offset =\n    ctx.canvas.height * (1 - (focusTimePos + focusTimeBuffer) / maxBuffer);\n  ctx.lineTo(x_offset, y_offset);\n  ctx.stroke();\n}\n\nfunction canvasBufferTimeRangeUpdate(\n  canvas,\n  minTime,\n  maxTime,\n  windowMinTime,\n  windowMaxTime,\n  events\n) {\n  var ctx = canvas.getContext('2d');\n  var bufferChartStart = eventLeftMargin;\n  var bufferChartWidth = ctx.canvas.width - eventLeftMargin - eventRightMargin;\n  var x_offset = 0;\n  var y_offset = 0;\n  var event;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  ctx.fillStyle = 'green';\n  ctx.globalAlpha = 0.5;\n  ctx.fillRect(0, 0, eventLeftMargin, canvas.height);\n  ctx.fillRect(\n    canvas.width - eventRightMargin,\n    0,\n    eventRightMargin,\n    canvas.height\n  );\n  ctx.globalAlpha = 1;\n\n  x_offset = 5;\n  y_offset = 15;\n  var legend = 'play pos/buffer';\n  ctx.fillStyle = 'black';\n  ctx.font = '15px Arial';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  if (events.length === 0) {\n    return;\n  }\n\n  var maxBuffer = 0;\n  for (var i = 0; i < events.length; i++) {\n    maxBuffer = Math.max(maxBuffer, events[i].buffer + events[i].pos);\n  }\n\n  y_offset += 15;\n  legend = 'last pos:' + events[events.length - 1].pos + ' ms';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'last buffer:' + events[events.length - 1].buffer + ' ms';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'max buffer:' + maxBuffer + ' ms';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'nb samples:' + events.length;\n  ctx.fillText(legend, x_offset, y_offset);\n\n  maxBuffer *= 1.1;\n\n  ctx.fillStyle = 'blue';\n  ctx.beginPath();\n  ctx.moveTo(bufferChartStart, ctx.canvas.height);\n  for (var j = 0; j < events.length; j++) {\n    event = events[j];\n    x_offset =\n      bufferChartStart +\n      (bufferChartWidth * (event.time - minTime)) / (maxTime - minTime);\n    y_offset = ctx.canvas.height * (1 - (event.buffer + event.pos) / maxBuffer);\n    ctx.lineTo(x_offset, y_offset);\n  }\n  ctx.lineTo(x_offset, canvas.height);\n  ctx.fill();\n\n  ctx.fillStyle = 'brown';\n  ctx.beginPath();\n  ctx.moveTo(bufferChartStart, ctx.canvas.height);\n  for (var k = 0; k < events.length; k++) {\n    event = events[k];\n    x_offset =\n      bufferChartStart +\n      (bufferChartWidth * (event.time - minTime)) / (maxTime - minTime);\n    y_offset = ctx.canvas.height * (1 - event.pos / maxBuffer);\n    ctx.lineTo(x_offset, y_offset);\n  }\n  ctx.lineTo(x_offset, canvas.height);\n  ctx.fill();\n\n  ctx.globalAlpha = 0.7;\n  ctx.fillStyle = 'grey';\n  var x_start = bufferChartStart;\n  var x_w =\n    (bufferChartWidth * (windowMinTime - minTime)) / (maxTime - minTime);\n  ctx.fillRect(x_start, 0, x_w, canvas.height);\n  x_start =\n    bufferChartStart +\n    (bufferChartWidth * (windowMaxTime - minTime)) / (maxTime - minTime);\n  x_w = canvas.width - x_start - eventRightMargin;\n  ctx.fillRect(x_start, 0, x_w, canvas.height);\n  ctx.globalAlpha = 1;\n}\n\nfunction canvasBitrateEventUpdate(\n  canvas,\n  minTime,\n  maxTime,\n  windowMinTime,\n  windowMaxTime,\n  levelEvents,\n  bitrateEvents\n) {\n  var ctx = canvas.getContext('2d');\n  var bufferChartStart = eventLeftMargin;\n  var bufferChartWidth = ctx.canvas.width - eventLeftMargin - eventRightMargin;\n  var x_offset = 0;\n  var y_offset = 0;\n  var event;\n  var maxLevel;\n  var minLevel;\n  var sumLevel;\n  var maxBitrate;\n  var minBitrate;\n  var sumDuration;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  if (levelEvents.length === 0 || bitrateEvents.length === 0) {\n    return;\n  }\n\n  maxBitrate = minBitrate = bitrateEvents[0].bitrate;\n  sumLevel = sumDuration = 0;\n  for (var i = 0; i < bitrateEvents.length; i++) {\n    sumLevel += bitrateEvents[i].duration * bitrateEvents[i].level;\n    sumDuration += bitrateEvents[i].duration;\n    maxBitrate = Math.max(maxBitrate, bitrateEvents[i].bitrate);\n    minBitrate = Math.min(minBitrate, bitrateEvents[i].bitrate);\n  }\n\n  maxLevel = minLevel = levelEvents[0].id;\n  for (var j = 0; j < levelEvents.length; j++) {\n    maxLevel = Math.max(maxLevel, levelEvents[j].id);\n    minLevel = Math.min(minLevel, levelEvents[j].id);\n  }\n\n  ctx.fillStyle = 'green';\n  ctx.globalAlpha = 0.5;\n  ctx.fillRect(0, 0, eventLeftMargin, canvas.height);\n  ctx.fillRect(\n    canvas.width - eventRightMargin,\n    0,\n    eventRightMargin,\n    canvas.height\n  );\n  ctx.globalAlpha = 1;\n\n  x_offset = 5;\n  y_offset = 0;\n  ctx.fillStyle = 'black';\n  ctx.font = '15px Arial';\n\n  y_offset += 15;\n  var legend =\n    'last bitrate:' +\n    (bitrateEvents[bitrateEvents.length - 1].bitrate / 1000).toFixed(2) +\n    'Mb/s';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'min bitrate:' + (minBitrate / 1000).toFixed(2) + 'Mb/s';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'max bitrate:' + (maxBitrate / 1000).toFixed(2) + 'Mb/s';\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend =\n    'min/last/max level:' +\n    minLevel +\n    '/' +\n    levelEvents[levelEvents.length - 1].id +\n    '/' +\n    maxLevel;\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'nb level switch:' + (levelEvents.length - 1);\n  ctx.fillText(legend, x_offset, y_offset);\n\n  y_offset += 15;\n  legend = 'average level:' + (sumLevel / sumDuration).toFixed(2);\n  ctx.fillText(legend, x_offset, y_offset);\n\n  maxBitrate *= 1.1;\n\n  ctx.strokeStyle = 'blue';\n  ctx.beginPath();\n  ctx.moveTo(bufferChartStart, ctx.canvas.height);\n  for (var k = 0; k < bitrateEvents.length; k++) {\n    event = bitrateEvents[k];\n    x_offset =\n      bufferChartStart +\n      (bufferChartWidth * (event.time - minTime)) / (maxTime - minTime);\n    y_offset = ctx.canvas.height * (1 - event.bitrate / maxBitrate);\n    ctx.lineTo(x_offset, y_offset);\n  }\n  ctx.lineTo(bufferChartStart + bufferChartWidth, y_offset);\n  ctx.stroke();\n\n  ctx.strokeStyle = 'black';\n  ctx.beginPath();\n  x_offset = bufferChartStart;\n  y_offset = ctx.canvas.height;\n  ctx.moveTo(x_offset, y_offset);\n  for (var l = 0; l < levelEvents.length; l++) {\n    event = levelEvents[l];\n    x_offset =\n      bufferChartStart +\n      (bufferChartWidth * (event.time - minTime)) / (maxTime - minTime);\n    ctx.lineTo(x_offset, y_offset);\n    y_offset = ctx.canvas.height * (1 - event.bitrate / maxBitrate);\n    ctx.lineTo(x_offset, y_offset);\n  }\n  ctx.lineTo(bufferChartStart + bufferChartWidth, y_offset);\n  ctx.stroke();\n\n  ctx.globalAlpha = 0.7;\n  ctx.fillStyle = 'grey';\n  var x_start = bufferChartStart;\n  var x_w =\n    (bufferChartWidth * (windowMinTime - minTime)) / (maxTime - minTime);\n  ctx.fillRect(x_start, 0, x_w, canvas.height);\n  x_start =\n    bufferChartStart +\n    (bufferChartWidth * (windowMaxTime - minTime)) / (maxTime - minTime);\n  x_w = canvas.width - x_start - eventRightMargin;\n  ctx.fillRect(x_start, 0, x_w, canvas.height);\n  ctx.globalAlpha = 1;\n}\n\nfunction canvasDrawLoadEvent(ctx, yoffset, event, minTime, maxTime) {\n  var legend;\n  var offset;\n  var x_start;\n  var x_w;\n  var networkChartStart = eventLeftMargin;\n  var networkChartWidth = ctx.canvas.width - eventLeftMargin - eventRightMargin;\n  var tend = Math.round(event.time + event.duration + event.latency);\n\n  // draw start\n  ctx.fillStyle = 'black';\n  ctx.font = '12px Arial';\n  legend = Math.round(event.time);\n  offset = ctx.measureText(legend).width + 5;\n  x_start =\n    networkChartStart -\n    offset +\n    (networkChartWidth * (event.time - minTime)) / (maxTime - minTime);\n  ctx.fillText(legend, x_start, yoffset + 12);\n\n  // draw latency rectangle\n  ctx.fillStyle = 'orange';\n  x_start =\n    networkChartStart +\n    (networkChartWidth * (event.time - minTime)) / (maxTime - minTime);\n  x_w = (networkChartWidth * event.latency) / (maxTime - minTime);\n  ctx.fillRect(x_start, yoffset, x_w, 15);\n  // draw download rectangle\n  ctx.fillStyle = 'green';\n  x_start =\n    networkChartStart +\n    (networkChartWidth * (event.time + event.latency - minTime)) /\n      (maxTime - minTime);\n  x_w = (networkChartWidth * event.load) / (maxTime - minTime);\n  ctx.fillRect(x_start, yoffset, x_w, 15);\n\n  if (event.parsing) {\n    // draw parsing rectangle\n    ctx.fillStyle = 'blue';\n    x_start =\n      networkChartStart +\n      (networkChartWidth *\n        (event.time + event.latency + event.load - minTime)) /\n        (maxTime - minTime);\n    x_w = (networkChartWidth * event.parsing) / (maxTime - minTime);\n    ctx.fillRect(x_start, yoffset, x_w, 15);\n\n    if (event.buffer) {\n      // draw buffering rectangle\n      ctx.fillStyle = 'red';\n      x_start =\n        networkChartStart +\n        (networkChartWidth *\n          (event.time + event.latency + event.load + event.parsing - minTime)) /\n          (maxTime - minTime);\n      x_w = (networkChartWidth * event.buffer) / (maxTime - minTime);\n      ctx.fillRect(x_start, yoffset, x_w, 15);\n    }\n  }\n\n  // draw end time\n  ctx.fillStyle = 'black';\n  ctx.font = '12px Arial';\n  legend = tend;\n  x_start += x_w + 5;\n  ctx.fillText(legend, x_start, yoffset + 12);\n  x_start += ctx.measureText(legend).width + 5;\n\n  legend = '[' + Math.round(event.latency);\n  ctx.fillStyle = 'orange';\n  ctx.fillText(legend, x_start, yoffset + 12);\n  x_start += ctx.measureText(legend).width + 5;\n\n  legend = Math.round(event.load);\n  if (!event.parsing) {\n    legend += ']';\n  }\n  ctx.fillStyle = 'green';\n  ctx.fillText(legend, x_start, yoffset + 12);\n  x_start += ctx.measureText(legend).width + 5;\n\n  if (event.parsing) {\n    legend = Math.round(event.parsing);\n    if (!event.buffer) {\n      legend += ']';\n    }\n    ctx.fillStyle = 'blue';\n    ctx.fillText(legend, x_start, yoffset + 12);\n    x_start += ctx.measureText(legend).width + 5;\n\n    if (event.buffer) {\n      legend = Math.round(event.buffer) + ']';\n      ctx.fillStyle = 'red';\n      ctx.fillText(legend, x_start, yoffset + 12);\n      x_start += ctx.measureText(legend).width + 5;\n    }\n  }\n\n  if (event.size) {\n    if (event.size > 1000 * 1000) {\n      legend = (event.size / 1000000).toFixed(1) + 'MB';\n    } else {\n      legend = Math.round(event.size / 1000) + 'kB';\n    }\n    ctx.fillStyle = 'black';\n    ctx.fillText(legend, x_start, yoffset + 12);\n    x_start += ctx.measureText(legend).width + 5;\n  }\n\n  if (event.bw) {\n    if (event.bw > 1000) {\n      legend = (event.bw / 1000).toFixed(1) + 'Mbps';\n    } else {\n      legend = event.bw + ' kbps';\n    }\n    ctx.fillStyle = 'black';\n    ctx.fillText(legend, x_start, yoffset + 12);\n    x_start += ctx.measureText(legend).width + 5;\n  }\n\n  // draw event name\n  ctx.fillStyle = 'black';\n  ctx.font = '15px Arial';\n  legend = event.type;\n  if (event.id2 !== undefined) {\n    legend += ' ' + event.id2;\n  }\n  if (event.id3 !== undefined) {\n    legend += '/' + event.id3;\n  }\n  if (event.id !== undefined) {\n    if (event.type.indexOf('fragment') !== -1) {\n      legend += ' @';\n    }\n    legend += ' ' + event.id;\n  }\n  if (event.start !== undefined) {\n    legend += ' [' + event.start + ',' + event.end + ']';\n  }\n  ctx.fillText(legend, 5, yoffset + 15);\n}\n\nfunction canvasDrawVideoEvent(ctx, yoffset, event, minTime, maxTime) {\n  var legend;\n  var offset;\n  var x_start;\n  var x_w;\n  var networkChartStart = eventLeftMargin;\n  var networkChartWidth = ctx.canvas.width - eventLeftMargin - eventRightMargin;\n\n  // draw event name\n  ctx.fillStyle = 'black';\n  ctx.font = '15px Arial';\n  legend = event.type;\n  if (event.name !== undefined) {\n    legend += ':' + event.name;\n  }\n  ctx.fillText(legend, 5, yoffset + 15);\n\n  // draw start time\n  ctx.fillStyle = 'black';\n  ctx.font = '12px Arial';\n  legend = Math.round(event.time);\n  offset = ctx.measureText(legend).width + 5;\n  x_start =\n    networkChartStart -\n    offset +\n    (networkChartWidth * (event.time - minTime)) / (maxTime - minTime);\n  ctx.fillText(legend, x_start, yoffset + 12);\n\n  // draw event rectangle\n  x_start =\n    networkChartStart +\n    (networkChartWidth * (event.time - minTime)) / (maxTime - minTime);\n  if (event.duration) {\n    x_w = (networkChartWidth * event.duration) / (maxTime - minTime);\n  } else {\n    x_w = 1;\n  }\n  ctx.fillRect(x_start, yoffset, x_w, 15);\n\n  if (event.duration) {\n    // draw end time\n    ctx.fillStyle = 'black';\n    ctx.font = '12px Arial';\n    legend = Math.round(event.time + event.duration);\n    x_start += x_w + 5;\n    ctx.fillText(legend, x_start, yoffset + 12);\n    x_start += ctx.measureText(legend).width + 5;\n\n    legend = '[' + Math.round(event.duration) + ']';\n    ctx.fillStyle = 'blue';\n    ctx.fillText(legend, x_start, yoffset + 12);\n  }\n}\n"],"names":["eventLeftMargin","eventRightMargin","canvasLoadEventUpdate","canvas","minTime","maxTime","events","event","start","ctx","getContext","i","y_offset","length","time","height","fillStyle","globalAlpha","fillRect","width","x_offset","font","legend","fillText","measureText","Math","round","canvasDrawLoadEvent","canvasVideoEventUpdate","canvasDrawVideoEvent","canvasBufferWindowUpdate","focusTime","minTimeBuffer","minTimePos","focusTimeBuffer","focusTimePos","bufferChartStart","bufferChartWidth","clearRect","maxBuffer","firstEventIdx","focusEventIdx","max","buffer","pos","beginPath","moveTo","lineTo","j","fill","k","stroke","canvasBufferTimeRangeUpdate","windowMinTime","windowMaxTime","x_start","x_w","canvasBitrateEventUpdate","levelEvents","bitrateEvents","maxLevel","minLevel","sumLevel","maxBitrate","minBitrate","sumDuration","bitrate","duration","level","min","id","toFixed","strokeStyle","l","yoffset","networkChartStart","networkChartWidth","tend","latency","load","parsing","size","bw","type","undefined","id2","id3","indexOf","end","name"],"version":3,"file":"index.83ba568f.js.map"}